# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-08-29 08:02
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Changelog',
            fields=[
                ('changeid', models.AutoField(db_column='changeID', primary_key=True, serialize=False)),
                ('changetitle', models.CharField(db_column='changeTitle', max_length=64)),
                ('changetext', models.CharField(blank=True, db_column='changeText', max_length=5000, null=True)),
                ('changedate', models.DateTimeField(db_column='changeDate')),
                ('sticky', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'changelog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('postid', models.AutoField(db_column='postID', primary_key=True, serialize=False)),
                ('privatepost', models.IntegerField(db_column='privatePost')),
                ('rating', models.IntegerField()),
                ('postdate', models.DateTimeField(db_column='postDate')),
                ('storagedisk', models.IntegerField(db_column='storageDisk')),
                ('filename', models.CharField(max_length=8)),
                ('ftype', models.CharField(max_length=6)),
                ('source', models.CharField(max_length=1024)),
                ('postsize', models.IntegerField(db_column='postSize')),
            ],
            options={
                'db_table': 'posts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Scratchpad',
            fields=[
                ('noteid', models.AutoField(db_column='noteID', primary_key=True, serialize=False)),
                ('note', models.CharField(max_length=256)),
                ('notedate', models.DateTimeField(db_column='noteDate')),
            ],
            options={
                'db_table': 'scratchpad',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('tagid', models.SmallIntegerField(db_column='tagID', primary_key=True, serialize=False)),
                ('tagname', models.CharField(db_column='tagName', max_length=60, unique=True)),
                ('tagtype', models.IntegerField(db_column='tagType')),
                ('tagdescription', models.CharField(blank=True, db_column='tagDescription', max_length=500, null=True)),
                ('minrating', models.IntegerField(db_column='minRating')),
                ('adminonly', models.IntegerField(blank=True, db_column='adminOnly', null=True)),
            ],
            options={
                'db_table': 'tags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('userid', models.AutoField(db_column='userID', primary_key=True, serialize=False)),
                ('uname', models.CharField(max_length=30)),
                ('phash', models.CharField(max_length=256)),
                ('salt', models.CharField(max_length=128)),
                ('utype', models.IntegerField()),
                ('storageused', models.IntegerField(db_column='storageUsed')),
                ('storageallowed', models.IntegerField(db_column='storageAllowed')),
                ('lastseen', models.DateTimeField(blank=True, db_column='lastSeen', null=True)),
            ],
            options={
                'db_table': 'users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Titles',
            fields=[
                ('postid', models.ForeignKey(db_column='postID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='legacydb.Posts')),
                ('title', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'titles',
                'managed': False,
            },
        ),
    ]
